name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pull-requests: write  # Needed for coverage comments

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for coverage comparison

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch coverage-badge

    - name: Run tests
      run: |
        hatch run test
        coverage xml
        coverage-badge -o coverage.svg -f

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Store coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          coverage.xml
          coverage.svg
        if-no-files-found: error

    - name: Run type checking
      run: hatch run typecheck

    - name: Run linting
      run: hatch run lint

  integration:
    name: Integration Test
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv pre-commit
        pip install -e .

    - name: Test hook with multiple environments
      run: |
        # Create test directory structure
        mkdir -p test_proj/project1/src test_proj/project2

        # Create test files
        cat > test_proj/project1/src/main.py <<EOF
        def greet(name: str) -> str:
            return f"Hello, {name}!"

        if __name__ == "__main__":
            print(greet("world"))
        EOF

        cat > test_proj/project2/app.py <<EOF
        from typing import List

        def process_items(items: List[str]) -> List[int]:
            return [len(item) for item in items]

        result: List[int] = process_items(["test", "example"])
        print(f"Processed: {result}")
        EOF

        # Create Pipfiles with specific tool versions
        cd test_proj/project1
        pipenv install ruff==0.1.14
        cd ../project2
        pipenv install mypy==1.8.0

        # Create pre-commit config
        cd ..
        cat > .pre-commit-config.yaml <<EOF
        repos:
        - repo: local
          hooks:
            - id: ruff-check
              name: ruff check
              entry: pipenv-tools-hook
              language: python
              types: [python]
              args: ['--tool=ruff', '--tool-args', 'check']
            - id: ruff-format
              name: ruff format
              entry: pipenv-tools-hook
              language: python
              types: [python]
              args: ['--tool=ruff', '--tool-args', 'format', '--check']
            - id: mypy-check
              name: mypy
              entry: pipenv-tools-hook
              language: python
              types: [python]
              args: ['--tool=mypy', '--tool-args', '--strict']
        EOF

        # Initialize git and test hooks
        git init
        git add .
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        pre-commit install

        # Attempt commit (should fail due to mypy error)
        if git commit -m "test commit" ; then
          echo "Hook should have failed due to mypy error"
          exit 1
        else
          echo "Hook failed as expected"
        fi

        # Fix the type error and try again
        cd project2
        cat > app.py <<EOF
        from typing import List

        def process_items(items: List[str]) -> List[int]:
            return [len(item) for item in items]

        def main() -> None:
            result: List[int] = process_items(["test", "example"])
            print(f"Processed: {result}")

        if __name__ == "__main__":
            main()
        EOF

        cd ..
        git add project2/app.py
        # Now the commit should succeed
        git commit -m "fix: corrected type issues"

  release:
    name: Create Release
    needs: [test, integration]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch build twine

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
